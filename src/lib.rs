#[derive(Debug, Clone, Copy)]
pub struct Listing<'a> {
    pub chapter: &'a str,
    pub description: &'a str,
    pub listing: &'a str,
    pub status: &'a str,
}

pub fn get_files() -> &'static [Listing<'static>] {
    &[
        Listing {
            chapter: "[1.] getting started; [1.2.] hello, world!",
            description: "a program that prints hello, world!",
            listing: "1-1",
            status: "desired",
        },
        Listing {
            chapter: "[1.] getting started; [1.3.] hello, cargo!",
            description: "contents of cargo.toml generated by cargo new",
            listing: "1-2",
            status: "toml",
        },
        Listing {
            chapter: "[2.] programming a guessing game",
            description: "code that gets a guess from the user and prints it",
            listing: "2-1",
            status: "desired",
        },
        Listing {
            chapter: "[2.] programming a guessing game",
            description: "the output from running cargo build after adding the rand crate as a dependency",
            listing: "2-2",
            status: "bash",
        },
        Listing {
            chapter: "[2.] programming a guessing game",
            description: "adding code to generate a random number",
            listing: "2-3",
            status: "desired",
        },
        Listing {
            chapter: "[2.] programming a guessing game",
            description: "handling the possible return values of comparing two numbers",
            listing: "2-4",
            status: "error",
        },
        Listing {
            chapter: "[2.] programming a guessing game",
            description: "ignoring a non-number guess and asking for another guess instead of crashing the program",
            listing: "2-5",
            status: "desired",
        },
        Listing {
            chapter: "[2.] programming a guessing game",
            description: "complete guessing game code",
            listing: "2-6",
            status: "desired",
        },
        Listing {
            chapter: "[3.] common programming concepts; [3.3.] functions",
            description: "a main function declaration containing one statement",
            listing: "3-1",
            status: "desired",
        },
        Listing {
            chapter: "[3.] common programming concepts; [3.5.] control flow",
            description: "assigning the result of an if expression to a variable",
            listing: "3-2",
            status: "desired",
        },
        Listing {
            chapter: "[3.] common programming concepts; [3.5.] control flow",
            description: "using a while loop to run code while a condition evaluates to true",
            listing: "3-3",
            status: "desired",
        },
        Listing {
            chapter: "[3.] common programming concepts; [3.5.] control flow",
            description: "looping through each element of a collection using a while loop",
            listing: "3-4",
            status: "desired",
        },
        Listing {
            chapter: "[3.] common programming concepts; [3.5.] control flow",
            description: "looping through each element of a collection using a for loop",
            listing: "3-5",
            status: "desired",
        },
        Listing {
            chapter: "[4.] understanding ownership; [4.1.] what is ownership?",
            description: "a variable and the scope in which it is valid",
            listing: "4-1",
            status: "desired",
        },
        Listing {
            chapter: "[4.] understanding ownership; [4.1.] what is ownership?",
            description: "assigning the integer value of vaiable x to y",
            listing: "4-2",
            status: "desired",
        },
        Listing {
            chapter: "[4.] understanding ownership; [4.1.] what is ownership?",
            description: "functions with ownership and the scope annotated",
            listing: "4-3",
            status: "desired",
        },
        Listing {
            chapter: "[4.] understanding ownership; [4.1.] what is ownership?",
            description: "transferring ownership of return values",
            listing: "4-4",
            status: "desired",
        },
        Listing {
            chapter: "[4.] understanding ownership; [4.1.] what is ownership?",
            description: "returning ownership of parameters",
            listing: "4-5",
            status: "desired",
        },
        Listing {
            chapter: "[4.] understanding ownership; [4.2.] references and borrowing",
            description: "attempting to modify a borrowed value",
            listing: "4-6",
            status: "error",
        },
        Listing {
            chapter: "[4.] understanding ownership; [4.3.] the slice type",
            description: "the first_word function that returns a byte index value into the string parameter",
            listing: "4-7",
            status: "desired",
        },
        Listing {
            chapter: "[4.] understanding ownership; [4.3.] the slice type",
            description: "storing the result from calling the first_word function and then changing the string contents",
            listing: "4-8",
            status: "desired",
        },
        Listing {
            chapter: "[4.] understanding ownership; [4.3.] the slice type",
            description: "improving the first_word function by using a string slice for the type of the s parameter",
            listing: "4-9",
            status: "desired",
        },
        Listing {
            chapter: "[5.] using structs to structure related data; [5.1.] defining and instantiating structs",
            description: "a user struct definition",
            listing: "5-1",
            status: "desired",
        },
        Listing {
            chapter: "[5.] using structs to structure related data; [5.1.] defining and instantiating structs",
            description: "creating an instance of the user struct",
            listing: "5-2",
            status: "desired",
        },
        Listing {
            chapter: "[5.] using structs to structure related data; [5.1.] defining and instantiating structs",
            description: "changing the value in the email field of a user instance",
            listing: "5-3",
            status: "desired",
        },
        Listing {
            chapter: "[5.] using structs to structure related data; [5.1.] defining and instantiating structs",
            description: "a build_user function that takes an email and username and returns a user instance",
            listing: "5-4",
            status: "desired",
        },
        Listing {
            chapter: "[5.] using structs to structure related data; [5.1.] defining and instantiating structs",
            description: "a build_user function that uses field init shorthand because the username and email parameters have the same as struct fields",
            listing: "5-5",
            status: "desired",
        },
        Listing {
            chapter: "[5.] using structs to structure related data; [5.1.] defining and instantiating structs",
            description: "creating a new user instance using all but one of the values from user1",
            listing: "5-6",
            status: "desired",
        },
        Listing {
            chapter: "[5.] using structs to structure related data; [5.1.] defining and instantiating structs",
            description: "using struct syntax to set a new email value for a user instance but to use the rest of the values from user1",
            listing: "5-7",
            status: "desired",
        },
        Listing {
            chapter: "[5.] using structs to structure related data; [5.2.] an example program using structs",
            description: "calculating the area of a rectangle specified by separate width and height variables",
            listing: "5-8",
            status: "desired",
        },
        Listing {
            chapter: "[5.] using structs to structure related data; [5.2.] an example program using structs",
            description: "specifying the width and height of the rectangle with a tuple",
            listing: "5-9",
            status: "desired",
        },
        Listing {
            chapter: "[5.] using structs to structure related data; [5.2.] an example program using structs",
            description: "defining a rectangle struct",
            listing: "5-10",
            status: "desired",
        },
        Listing {
            chapter: "[5.] using structs to structure related data; [5.2.] an example program using structs",
            description: "attempting to print a rectangle instance",
            listing: "5-11",
            status: "error",
        },
        Listing {
            chapter: "[5.] using structs to structure related data; [5.2.] an example program using structs",
            description: "adding the attribute to derive the debug trait and printing the rectangle instance using debug formatting",
            listing: "5-12",
            status: "desired",
        },
        Listing {
            chapter: "[5.] using structs to structure related data; [5.3.] method syntax",
            description: "defining an area method on the rectangle struct",
            listing: "5-13",
            status: "desired",
        },
        Listing {
            chapter: "[5.] using structs to structure related data; [5.3.] method syntax",
            description: "using the as-yet-unwritten can_hold method",
            listing: "5-14",
            status: "desired",
        },
        Listing {
            chapter: "[5.] using structs to structure related data; [5.3.] method syntax",
            description: "implementing the can_hold method on rectangle that takes another rectangle instance as a parameter",
            listing: "5-15",
            status: "desired",
        },
        Listing {
            chapter: "[5.] using structs to structure related data; [5.3.] method syntax",
            description: "rewriting listing 5-1.] using multiple impl blocks",
            listing: "5-16",
            status: "desired",
        },
        Listing {
            chapter: "[6.] enums and pattern matching; [6.1.] defining an enum",
            description: "storing the data and ipaddrkind variant of an ip address using a struct",
            listing: "6-1",
            status: "desired",
        },
        Listing {
            chapter: "[6.] enums and pattern matching; [6.1.] defining an enum",
            description: "a message enum whose variants each store different amounts and types of values",
            listing: "6-2",
            status: "desired",
        },
        Listing {
            chapter: "[6.] enums and pattern matching; [6.2.] the match control flow construct",
            description: "an enum and a match expression that has the variants of the enum as its patterns",
            listing: "6-3",
            status: "desired",
        },
        Listing {
            chapter: "[6.] enums and pattern matching; [6.2.] the match control flow construct",
            description: "a coin enum in which the quarter variant also holds a usstate value",
            listing: "6-4",
            status: "desired",
        },
        Listing {
            chapter: "[6.] enums and pattern matching; [6.2.] the match control flow construct",
            description: "a function that uses a match expression on an option<i32>",
            listing: "6-5",
            status: "desired",
        },
        Listing {
            chapter: "[6.] enums and pattern matching; [6.3.] concise control flow with if let and let else",
            description: "a match that only cares about executing code when the value is some",
            listing: "6-6",
            status: "desired",
        },
        Listing {
            chapter: "[6.] enums and pattern matching; [6.3.] concise control flow with if let and let else",
            description: "checking whether a state existed in 1900 by using conditionals nested inside an if let",
            listing: "6-7",
            status: "desired",
        },
        Listing {
            chapter: "[6.] enums and pattern matching; [6.3.] concise control flow with if let and let else",
            description: "using if let to produce a value or return early",
            listing: "6-8",
            status: "desired",
        },
        Listing {
            chapter: "[6.] enums and pattern matching; [6.3.] concise control flow with if let and let else",
            description: "using let...else to clarify the flow through the function",
            listing: "6-9",
            status: "desired",
        },
        Listing {
            chapter: "[7.] managing growing projects with packages, crates, and modules; [7.2.] defining modules to control scope and privacy",
            description: "a front_of_house module containing other modules that then contain functions",
            listing: "7-1",
            status: "desired",
        },
        Listing {
            chapter: "[7.] managing growing projects with packages, crates, and modules; [7.2.] defining modules to control scope and privacy",
            description: "a front_of_house module containing other modules that then contain functions",
            listing: "7-2",
            status: "tree",
        },
        Listing {
            chapter: "[7.] managing growing projects with packages, crates, and modules; [7.3.] paths for referring to an item in the module tree",
            description: "a front_of_house module containing other modules that then contain functions",
            listing: "7-3",
            status: "error",
        },
        Listing {
            chapter: "[7.] managing growing projects with packages, crates, and modules; [7.3.] paths for referring to an item in the module tree",
            description: "compiler errors from building the code in listing 7-3",
            listing: "7-4",
            status: "bash",
        },
        Listing {
            chapter: "[7.] managing growing projects with packages, crates, and modules; [7.3.] paths for referring to an item in the module tree",
            description: "declaring the hosting module as pub to use it from eat_at_restaurant",
            listing: "7-5",
            status: "error",
        },
        Listing {
            chapter: "[7.] managing growing projects with packages, crates, and modules; [7.3.] paths for referring to an item in the module tree",
            description: "compiler errors from building  the code in listing 7-5",
            listing: "7-6",
            status: "bash",
        },
        Listing {
            chapter: "[7.] managing growing projects with packages, crates, and modules; [7.3.] paths for referring to an item in the module tree",
            description: "adding the pub keyword to mod hosting and fn add_to_waitlist lets us call the function from eat_at_restaurant",
            listing: "7-7",
            status: "desired",
        },
        Listing {
            chapter: "[7.] managing growing projects with packages, crates, and modules; [7.3.] paths for referring to an item in the module tree",
            description: "calling a function using a relative path starting with super",
            listing: "7-8",
            status: "desired",
        },
        Listing {
            chapter: "[7.] managing growing projects with packages, crates, and modules; [7.3.] paths for referring to an item in the module tree",
            description: "a struct with some public fields and some private fields",
            listing: "7-9",
            status: "desired",
        },
        Listing {
            chapter: "[7.] managing growing projects with packages, crates, and modules; [7.3.] paths for referring to an item in the module tree",
            description: "designating an enum as public makes all its variants public",
            listing: "7-10",
            status: "desired",
        },
        Listing {
            chapter: "[7.] managing growing projects with packages, crates, and modules; [7.4.] bringing paths into scope with the use keyword",
            description: "bringing a module into scope with use",
            listing: "7-11",
            status: "desired",
        },
        Listing {
            chapter: "[7.] managing growing projects with packages, crates, and modules; [7.4.] bringing paths into scope with the use keyword",
            description: "a use statement only applies in the scope it's written in",
            listing: "7-12",
            status: "error",
        },
        Listing {
            chapter: "[7.] managing growing projects with packages, crates, and modules; [7.4.] bringing paths into scope with the use keyword",
            description: "bringing the add_to_waitlist function into scope with use, which is unidiomatic",
            listing: "7-12",
            status: "questionable",
        },
        Listing {
            chapter: "[7.] managing growing projects with packages, crates, and modules; [7.4.] bringing paths into scope with the use keyword",
            description: "bringing hashmap into scope in an idiomatic way",
            listing: "7-14",
            status: "desired",
        },
        Listing {
            chapter: "[7.] managing growing projects with packages, crates, and modules; [7.4.] bringing paths into scope with the use keyword",
            description: "bringing two types with the same name into the scope requires using their parent modules",
            listing: "7-15",
            status: "desired",
        },
        Listing {
            chapter: "[7.] managing growing projects with packages, crates, and modules; [7.4.] bringing paths into scope with the use keyword",
            description: "renaming a type when it's brought into scope with the as keyword",
            listing: "7-16",
            status: "desired",
        },
        Listing {
            chapter: "[7.] managing growing projects with packages, crates, and modules; [7.4.] bringing paths into scope with the use keyword",
            description: "making a name available for any code to use from a new scope with pub use",
            listing: "7-17",
            status: "desired",
        },
        Listing {
            chapter: "[7.] managing growing projects with packages, crates, and modules; [7.4.] bringing paths into scope with the use keyword",
            description: "specifying a nested path to bring multiple items with the same prefix into scope",
            listing: "7-18",
            status: "desired",
        },
        Listing {
            chapter: "[7.] managing growing projects with packages, crates, and modules; [7.4.] bringing paths into scope with the use keyword",
            description: "two use statements where one is a subpath of the other",
            listing: "7-19",
            status: "desired",
        },
        Listing {
            chapter: "[7.] managing growing projects with packages, crates, and modules; [7.4.] bringing paths into scope with the use keyword",
            description: "combining the paths in listing 7-1.]  into one use statement",
            listing: "7-20",
            status: "desired",
        },
        Listing {
            chapter: "[7.] managing growing projects with packages, crates, and modules; [7.5.] separating modules into different files",
            description: "declaring the front_of_house module whose body will be in src/front_of_house.rs",
            listing: "7-21",
            status: "error",
        },
        Listing {
            chapter: "[8.] common collections; [8.1.] storing lists of values with vectors",
            description: "creating a new, empty vector to hold values of type i32",
            listing: "8-1",
            status: "desired",
        },
        Listing {
            chapter: "[8.] common collections; [8.1.] storing lists of values with vectors",
            description: "creating a new vector containing values",
            listing: "8-2",
            status: "desired",
        },
        Listing {
            chapter: "[8.] common collections; [8.1.] storing lists of values with vectors",
            description: "using the push method to add values to a vector",
            listing: "8-3",
            status: "desired",
        },
        Listing {
            chapter: "[8.] common collections; [8.1.] storing lists of values with vectors",
            description: "using indexing syntax and using the get method to access an item in a vector",
            listing: "8-4",
            status: "desired",
        },
        Listing {
            chapter: "[8.] common collections; [8.1.] storing lists of values with vectors",
            description: "attempting to access the element at index 100 in a vector containing five elements",
            listing: "8-5",
            status: "error",
        },
        Listing {
            chapter: "[8.] common collections; [8.1.] storing lists of values with vectors",
            description: "attempting to add an element to a vector while holding a reference to an item",
            listing: "8-6",
            status: "error",
        },
        Listing {
            chapter: "[8.] common collections; [8.1.] storing lists of values with vectors",
            description: "printing each element in a vector by iterating over thhe elements using a for loop",
            listing: "8-7",
            status: "desired",
        },
        Listing {
            chapter: "[8.] common collections; [8.1.] storing lists of values with vectors",
            description: "iterating over mutable references to elements in a vector",
            listing: "8-8",
            status: "desired",
        },
        Listing {
            chapter: "[8.] common collections; [8.1.] storing lists of values with vectors",
            description: "defining an enum to store values of different types in one vector",
            listing: "8-9",
            status: "desired",
        },
        Listing {
            chapter: "[8.] common collections; [8.1.] storing lists of values with vectors",
            description: "showing where the vector and its elements are dropped",
            listing: "8-10",
            status: "desired",
        },
        Listing {
            chapter: "[8.] common collections; [8.2.] storing utf-8 encoded text with strings",
            description: "creating a new, empty string",
            listing: "8-11",
            status: "desired",
        },
        Listing {
            chapter: "[8.] common collections; [8.2.] storing utf-8 encoded text with strings",
            description: "using the to_string method to create a string from a string literal",
            listing: "8-12",
            status: "desired",
        },
        Listing {
            chapter: "[8.] common collections; [8.2.] storing utf-8 encoded text with strings",
            description: "using the string::from function to create a string from a string literal",
            listing: "8-13",
            status: "desired",
        },
        Listing {
            chapter: "[8.] common collections; [8.2.] storing utf-8 encoded text with strings",
            description: "storing greetings in different languages in strings",
            listing: "8-14",
            status: "desired",
        },
        Listing {
            chapter: "[8.] common collections; [8.2.] storing utf-8 encoded text with strings",
            description: "appending a string slice to a string using the push_str method",
            listing: "8-15",
            status: "desired",
        },
        Listing {
            chapter: "[8.] common collections; [8.2.] storing utf-8 encoded text with strings",
            description: "using a string slice after appending its contents to a string",
            listing: "8-16",
            status: "desired",
        },
        Listing {
            chapter: "[8.] common collections; [8.2.] storing utf-8 encoded text with strings",
            description: "adding one character to a string value using push",
            listing: "8-17",
            status: "desired",
        },
        Listing {
            chapter: "[8.] common collections; [8.2.] storing utf-8 encoded text with strings",
            description: "using the + operator to combine two string values into a new string value",
            listing: "8-18",
            status: "desired",
        },
        Listing {
            chapter: "[8.] common collections; [8.2.] storing utf-8 encoded text with strings",
            description: "attempting to use indexing syntax with a string",
            listing: "8-19",
            status: "error",
        },
        Listing {
            chapter: "[8.] common collections; [8.3.] storing keys with associated values in hash maps",
            description: "creating a new hash map and inserting some keys and values",
            listing: "8-20",
            status: "desired",
        },
        Listing {
            chapter: "[8.] common collections; [8.3.] storing keys with associated values in hash maps",
            description: "creating a new hash map and inserting some keys and values",
            listing: "8-20",
            status: "desired",
        },
        Listing {
            chapter: "[8.] common collections; [8.3.] storing keys with associated values in hash maps",
            description: "accessing the score for the blue team stored in the hash map",
            listing: "8-21",
            status: "desired",
        },
        Listing {
            chapter: "[8.] common collections; [8.3.] storing keys with associated values in hash maps",
            description: "showing that keys and values are owned by the hash map once they're inserted",
            listing: "8-22",
            status: "desired",
        },
        Listing {
            chapter: "[8.] common collections; [8.3.] storing keys with associated values in hash maps",
            description: "replacing a value stored with a particular key",
            listing: "8-23",
            status: "desired",
        },
        Listing {
            chapter: "[8.] common collections; [8.3.] storing keys with associated values in hash maps",
            description: "using the entry method to only insert if the key does not already have a value",
            listing: "8-24",
            status: "desired",
        },
        Listing {
            chapter: "[8.] common collections; [8.3.] storing keys with associated values in hash maps",
            description: "counting occurances of words using a hash map that stores words and counts",
            listing: "8-25",
            status: "desired",
        },
        Listing {
            chapter: "[9.] error handling; [9.1.] unrecoverable errors with panic!",
            description: "attempting to access an element beyond the end of a vector, which will cause a call to panic!",
            listing: "9-1",
            status: "panic",
        },
        Listing {
            chapter: "[9.] error handling; [9.1.] unrecoverable errors with panic!",
            description: "the backtrace generated by a call to panic! displayed when the environment variable rust_backtrace is set",
            listing: "9-2",
            status: "bash",
        },
        Listing {
            chapter: "[9.] error handling; [9.2.] recoverable errors with result",
            description: "opening a file",
            listing: "9-3",
            status: "desired",
        },
        Listing {
            chapter: "[9.] error handling; [9.2.] recoverable errors with result",
            description: "using a match expression to handle the result variants that might be returned",
            listing: "9-4",
            status: "desired",
        },
        Listing {
            chapter: "[9.] error handling; [9.2.] recoverable errors with result",
            description: "handling different kinds of errors in different ways",
            listing: "9-5",
            status: "desired",
        },
        Listing {
            chapter: "[9.] error handling; [9.2.] recoverable errors with result",
            description: "a function that returns errors to the calling code using match",
            listing: "9-6",
            status: "desired",
        },
        Listing {
            chapter: "[9.] error handling; [9.2.] recoverable errors with result",
            description: "a function that returns errors to the calling code using the ? operator",
            listing: "9-7",
            status: "desired",
        },
        Listing {
            chapter: "[9.] error handling; [9.2.] recoverable errors with result",
            description: "chaining method calls after the ? operator",
            listing: "9-8",
            status: "desired",
        },
        Listing {
            chapter: "[9.] error handling; [9.2.] recoverable errors with result",
            description: "using fs::read_to_string instead of opening and then reading the file",
            listing: "9-9",
            status: "desired",
        },
        Listing {
            chapter: "[9.] error handling; [9.2.] recoverable errors with result",
            description: "attempting to use the ? in the main function that returns () won't compile",
            listing: "9-10",
            status: "error",
        },
        Listing {
            chapter: "[9.] error handling; [9.2.] recoverable errors with result",
            description: "using the ? operator on an option<t> value",
            listing: "9-11",
            status: "desired",
        },
        Listing {
            chapter: "[9.] error handling; [9.2.] recoverable errors with result",
            description: "changing main to return result<(), e> allows the use of the ? operator on result values",
            listing: "9-12",
            status: "desired",
        },
        Listing {
            chapter: "[9.] error handling; [9.3.] to panic! or not to panic!",
            description: "a guess type that will only continue with values between 1 and 100",
            listing: "9-13",
            status: "desired",
        },
        Listing {
            chapter: "[10.] generic types, traits, and lifetimes",
            description: "finding the largest number in a list of numbers",
            listing: "10-1",
            status: "desired",
        },
        Listing {
            chapter: "[10.] generic types, traits, and lifetimes",
            description: "code to find the largest number in two lists of numbers",
            listing: "10-2",
            status: "desired",
        },
        Listing {
            chapter: "[10.] generic types, traits, and lifetimes",
            description: "abstracted code to find the largest number in two lines",
            listing: "10-3",
            status: "desired",
        },
        Listing {
            chapter: "[10.] generic types, traits, and lifetimes; [10.1.] generic data types",
            description: "two functions that differ only in their names and in the types in their signatures",
            listing: "10-4",
            status: "desired",
        },
        Listing {
            chapter: "[10.] generic types, traits, and lifetimes; [10.1.] generic data types",
            description: "the largest function using generic type parameters; [this doesn't compile yet",
            listing: "10-5",
            status: "error",
        },
        Listing {
            chapter: "[10.] generic types, traits, and lifetimes; [10.1.] generic data types",
            description: "a point<t> struct that holds x and y values of type t",
            listing: "10-6",
            status: "desired",
        },
        Listing {
            chapter: "[10.] generic types, traits, and lifetimes; [10.1.] generic data types",
            description: "the fields x and y must be the same type because both have the same generic data type t",
            listing: "10-7",
            status: "error",
        },
        Listing {
            chapter: "[10.] generic types, traits, and lifetimes; [10.1.] generic data types",
            description: "a point<t, u> generic over two types so that x and y can be values of different types",
            listing: "10-8",
            status: "desired",
        },
        Listing {
            chapter: "[10.] generic types, traits, and lifetimes; [10.1.] generic data types",
            description: "implementing a method named x on the point<t> struct that will return a reference to the x field of type t",
            listing: "10-9",
            status: "desired",
        },
        Listing {
            chapter: "[10.] generic types, traits, and lifetimes; [10.1.] generic data types",
            description: "an impl block that only applies to a struct with a particular concrete type for the generic type parameter t",
            listing: "10-10",
            status: "desired",
        },
        Listing {
            chapter: "[10.] generic types, traits, and lifetimes; [10.1.] generic data types",
            description: "a method that uses generic types different from its struct's definition",
            listing: "10-11",
            status: "desired",
        },
        Listing {
            chapter: "[10.] generic types, traits, and lifetimes; [10.2.] traits: defining shared behavior",
            description: "a summary trait that consists of the behavior provided by a summarize method",
            listing: "10-12",
            status: "desired",
        },
        Listing {
            chapter: "[10.] generic types, traits, and lifetimes; [10.2.] traits: defining shared behavior",
            description: "implementing the summary trait on the newsarticle and socialpost types",
            listing: "10-13",
            status: "desired",
        },
        Listing {
            chapter: "[10.] generic types, traits, and lifetimes; [10.2.] traits: defining shared behavior",
            description: "defining a summary trait with a default implementation of the summarize method",
            listing: "10-14",
            status: "desired",
        },
        Listing {
            chapter: "[10.] generic types, traits, and lifetimes; [10.2.] traits: defining shared behavior",
            description: "conditionally implementing methods on a generic type depending on trait bounds",
            listing: "10-15",
            status: "desired",
        },
        Listing {
            chapter: "[10.] generic types, traits, and lifetimes; [10.3.] validating references with lifetimes",
            description: "an attempt to use a reference whose value has gone out of scope",
            listing: "10-16",
            status: "error",
        },
        Listing {
            chapter: "[10.] generic types, traits, and lifetimes; [10.3.] validating references with lifetimes",
            description: "annotations of the lifetimes of r and x, named 'a and 'b, respectively",
            listing: "10-17",
            status: "error",
        },
        Listing {
            chapter: "[10.] generic types, traits, and lifetimes; [10.3.] validating references with lifetimes",
            description: "a valid reference because the data has a longer lifetime than the reference",
            listing: "10-18",
            status: "desired",
        },
        Listing {
            chapter: "[10.] generic types, traits, and lifetimes; [10.3.] validating references with lifetimes",
            description: "a main function that calls the longest function to find the longer of two string slices",
            listing: "10-19",
            status: "desired",
        },
        Listing {
            chapter: "[10.] generic types, traits, and lifetimes; [10.3.] validating references with lifetimes",
            description: "an implementation of the longest function that returns the longer of two string slices",
            listing: "10-20",
            status: "error",
        },
        Listing {
            chapter: "[10.] generic types, traits, and lifetimes; [10.3.] validating references with lifetimes",
            description: "the longest function definition specifying that all the references in the signature must have the same lifetime 'a",
            listing: "10-21",
            status: "desired",
        },
        Listing {
            chapter: "[10.] generic types, traits, and lifetimes; [10.3.] validating references with lifetimes",
            description: "using  the longest function with references to string values that have different concrete lifetimes",
            listing: "10-22",
            status: "desired",
        },
        Listing {
            chapter: "[10.] generic types, traits, and lifetimes; [10.3.] validating references with lifetimes",
            description: "attempting to use result after string2 has  gone out of scope",
            listing: "10-23",
            status: "error",
        },
        Listing {
            chapter: "[10.] generic types, traits, and lifetimes; [10.3.] validating references with lifetimes",
            description: "a struct that holds a reference, requiring a lifetime annotation",
            listing: "10-24",
            status: "desired",
        },
        Listing {
            chapter: "[10.] generic types, traits, and lifetimes; [10.3.] validating references with lifetimes",
            description: "a function we defined in listing 4-9 that compiled without lifetime annotations, even though the parameter and return type are references",
            listing: "10-25",
            status: "desired",
        },
        Listing {
            chapter: "[11.] writing automated tests; [11.1.] how to write tests",
            description: "the code generated automatically by cargo new",
            listing: "11-1",
            status: "desired",
        },
        Listing {
            chapter: "[11.] writing automated tests; [11.1.] how to write tests",
            description: "the output from running the automatically generated test",
            listing: "11-2",
            status: "bash",
        },
        Listing {
            chapter: "[11.] writing automated tests; [11.1.] how to write tests",
            description: "adding a second test that will fail because we call the panic! macro",
            listing: "11-3",
            status: "desired",
        },
        Listing {
            chapter: "[11.] writing automated tests; [11.1.] how to write tests",
            description: "test results when one test passes and one test fails",
            listing: "11-4",
            status: "bash",
        },
        Listing {
            chapter: "[11.] writing automated tests; [11.1.] how to write tests",
            description: "the rectangle struct and its can_hold method from chapter 5",
            listing: "11-5",
            status: "desired",
        },
        Listing {
            chapter: "[11.] writing automated tests; [11.1.] how to write tests",
            description: "a test for can_hold that checks whether a larger module can indeed hold a smaller rectangle",
            listing: "11-6",
            status: "desired",
        },
        Listing {
            chapter: "[11.] writing automated tests; [11.1.] how to write tests",
            description: "testing the function add_two using the assert_eq! macro",
            listing: "11-7",
            status: "desired",
        },
        Listing {
            chapter: "[11.] writing automated tests; [11.1.] how to write tests",
            description: "testing that a condition will cause a panic!",
            listing: "11-8",
            status: "desired",
        },
        Listing {
            chapter: "[11.] writing automated tests; [11.1.] how to write tests",
            description: "testing for a panic! with a panic message containing a specified substring",
            listing: "11-9",
            status: "desired",
        },
        Listing {
            chapter: "[11.] writing automated tests; [11.2.] controlling how tests are run",
            description: "tests for a function that calls println!",
            listing: "11-10",
            status: "panic",
        },
        Listing {
            chapter: "[11.] writing automated tests; [11.2.] controlling how tests are run",
            description: "three tests with three different names",
            listing: "11-11",
            status: "desired",
        },
        Listing {
            chapter: "[11.] writing automated tests; [11.3.] test organisation",
            description: "testing a private function",
            listing: "11-12",
            status: "desired",
        },
        Listing {
            chapter: "[11.] writing automated tests; [11.3.] test organisation",
            description: "an integration test of a function in the adder crate",
            listing: "11-13",
            status: "desired",
        },
        Listing {
            chapter: "[12.] an i/o project: building a command line program; [12.1.] accepting command line arguments",
            description: "collecting the command line arguments into a vector and printing them",
            listing: "12-1",
            status: "desired",
        },
        Listing {
            chapter: "[12.] an i/o project: building a command line program; [12.1.] accepting command line arguments",
            description: "creating variables to hold the query argument and file path argument",
            listing: "12-2",
            status: "desired",
        },
        Listing {
            chapter: "[12.] an i/o project: building a command line program; [12.2.] reading a file",
            description: "a poem by emily dickinson makes a good test case",
            listing: "12-3",
            status: "text",
        },
        Listing {
            chapter: "[12.] an i/o project: building a command line program; [12.2 reading a file",
            description: "reading  the contents of the file specified by the second argument",
            listing: "12-4",
            status: "desired",
        },
        Listing {
            chapter: "[12.] an i/o project: building a command line program; [12.3.] refactoring to improve modularity and error handling",
            description: "extracting a parse_config function from main",
            listing: "12-5",
            status: "desired",
        },
        Listing {
            chapter: "[12.] an i/o project: building a command line program; [12.3.] refactoring to improve modularity and error handling",
            description: "refactoring parse_config to return an instance of a config struct",
            listing: "12-6",
            status: "desired",
        },
        Listing {
            chapter: "[12.] an i/o project: building a command line program; [12.3.] refactoring to improve modularity and error handling",
            description: "changing parse_config into config::new",
            listing: "12-7",
            status: "desired",
        },
        Listing {
            chapter: "[12.] an i/o project: building a command line program; [12.3.] refactoring to improve modularity and error handling",
            description: "adding a check for the number of arguments",
            listing: "12-8",
            status: "desired",
        },
        Listing {
            chapter: "[12.] an i/o project: building a command line program; [12.3.] refactoring to improve modularity and error handling",
            description: "returning a result from config::build",
            listing: "12-9",
            status: "error",
        },
        Listing {
            chapter: "[12.] an i/o project: building a command line program; [12.3.] refactoring to improve modularity and error handling",
            description: "exiting with an error code if building a config fails",
            listing: "12-10",
            status: "desired",
        },
        Listing {
            chapter: "[12.] an i/o project: building a command line program; [12.3.] refactoring to improve modularity and error handling",
            description: "extracting a run function containing the rest of the program logic",
            listing: "12-11",
            status: "desired",
        },
        Listing {
            chapter: "[12.] an i/o project: building a command line program; [12.3.] refactoring to improve modularity and error handling",
            description: "changing the run function to return result",
            listing: "12-12",
            status: "desired",
        },
        Listing {
            chapter: "[12.] an i/o project: building a command line program; [12.3.] refactoring to improve modularity and error handling",
            description: "defining the search function in src/lib.rs",
            listing: "12-13",
            status: "error",
        },
        Listing {
            chapter: "[12.] an i/o project: building a command line program; [12.3.] refactoring to improve modularity and error handling",
            description: "using the minigrep library crate's search function in src/main.rs",
            listing: "12-14",
            status: "desired",
        },
        Listing {
            chapter: "[12.] an i/o project: building a command line program; [12.4.] developing the library's functionality with test driven development",
            description: "creating a failing test for the search function for the functionality we wish we had",
            listing: "12-15",
            status: "desired",
        },
        Listing {
            chapter: "[12.] an i/o project: building a command line program; [12.4.] developing the library's functionality with test driven development",
            description: "defining just enough of the search function so calling it won't panic",
            listing: "12-16",
            status: "desired",
        },
        Listing {
            chapter: "[12.] an i/o project: building a command line program; [12.4.] developing the library's functionality with test driven development",
            description: "iterating through each line in contents",
            listing: "12-17",
            status: "error",
        },
        Listing {
            chapter: "[12.] an i/o project: building a command line program; [12.4.] developing the library's functionality with test driven development",
            description: "adding  functionality to see wheather the line contains the stirng in query",
            listing: "12-18",
            status: "error",
        },
        Listing {
            chapter: "[12.] an i/o project: building a command line program; [12.4.] developing the library's functionality with test driven development",
            description: "storing the lines that match so we can return them",
            listing: "12-19",
            status: "desired",
        },
        Listing {
            chapter: "[12.] an i/o project: building a command line program; [12.5.] working with environment variables",
            description: "adding a new failing test for the case-insensitive function we're about to add",
            listing: "12-20",
            status: "error",
        },
        Listing {
            chapter: "[12.] an i/o project: building a command line program; [12.5.] working with environment variables",
            description: "defining the search_case_insensitive function to lowercase the query and the line before comparing them",
            listing: "12-21",
            status: "desired",
        },
        Listing {
            chapter: "[12.] an i/o project: building a command line program; [12.5.] working with environment variables",
            description: "calling either search or search_case_insensitive based on the value in config.ignore_case",
            listing: "12-22",
            status: "error",
        },
        Listing {
            chapter: "[12.] an i/o project: building a command line program; [12.5.] working with environment variables",
            description: "checking for any value in an environment variable named ignore case",
            listing: "12-23",
            status: "desired",
        },
        Listing {
            chapter: "[12.] an i/o project: building a command line program; [12.6.] writing error messages to standard error instead of standard output",
            description: "writing error messages to standard error instead of standard output using eprintln!",
            listing: "12-24",
            status: "desired",
        },
    ]
}
